{
  "name": "DJ Track Upload & OCR Processing",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "dj-track-uploaded",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "dj-track-uploaded"
    },
    {
      "parameters": {
        "jsCode": "// Process the incoming OCR results\nconst results = $input.first().json.results || [];\nconst timestamp = $input.first().json.timestamp;\n\nconst processedResults = results.map(result => {\n  return {\n    filename: result.file,\n    ocrText: result.ocrText,\n    djName: result.match?.['DJ Name'] || 'Unknown',\n    trackName: result.match?.['Name of the Tracks'] || 'Unknown',\n    purchaseLink: result.match?.['Link to Purchase Track'] || null,\n    price: result.match?.['Price per Track'] || 'N/A',\n    platform: result.match?.['Link to Purchase Track']?.includes('beatport') ? 'Beatport' : 'Other',\n    matchFound: !!result.match,\n    timestamp: timestamp\n  };\n});\n\nreturn processedResults.map(item => ({ json: item }));"
      },
      "id": "process-data",
      "name": "Process OCR Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.matchFound }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-match",
      "name": "Check if Match Found",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "subject": "ðŸŽµ New Track Matched!",
        "message": "=Track: {{ $json.trackName }}\nDJ: {{ $json.djName }}\nPrice: {{ $json.price }}\nPlatform: {{ $json.platform }}\n\nPurchase Link: {{ $json.purchaseLink }}",
        "options": {
          "allowUnauthorizedCerts": false,
          "appendAttribution": true
        }
      },
      "id": "send-notification",
      "name": "Send Email Notification",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [900, 200],
      "credentials": {
        "smtp": {
          "id": "smtp-credentials",
          "name": "SMTP Credentials"
        }
      }
    },
    {
      "parameters": {
        "url": "http://localhost:5000/api/library/add",
        "authentication": "none",
        "requestMethod": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "djName",
              "value": "={{ $json.djName }}"
            },
            {
              "name": "trackName",
              "value": "={{ $json.trackName }}"
            },
            {
              "name": "purchaseLink",
              "value": "={{ $json.purchaseLink }}"
            },
            {
              "name": "price",
              "value": "={{ $json.price }}"
            },
            {
              "name": "platform",
              "value": "={{ $json.platform }}"
            },
            {
              "name": "status",
              "value": "identified"
            }
          ]
        },
        "options": {}
      },
      "id": "add-to-library",
      "name": "Add to Library",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "url": "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK",
        "authentication": "none",
        "requestMethod": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "text",
              "value": "=ðŸŽµ New track identified: *{{ $json.trackName }}* by *{{ $json.djName }}* ({{ $json.price }}) - <{{ $json.purchaseLink }}|Buy Now>"
            }
          ]
        },
        "options": {}
      },
      "id": "slack-notification",
      "name": "Slack Notification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 400]
    },
    {
      "parameters": {
        "url": "http://localhost:5000/api/ocr/failed",
        "authentication": "none",
        "requestMethod": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "filename",
              "value": "={{ $json.filename }}"
            },
            {
              "name": "ocrText",
              "value": "={{ $json.ocrText }}"
            },
            {
              "name": "timestamp",
              "value": "={{ $json.timestamp }}"
            }
          ]
        },
        "options": {}
      },
      "id": "log-failed-match",
      "name": "Log Failed Match",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 500]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"status\": \"success\", \"processed\": $input.all().length, \"timestamp\": new Date().toISOString() } }}"
      },
      "id": "webhook-response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1120, 300]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Process OCR Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process OCR Data": {
      "main": [
        [
          {
            "node": "Check if Match Found",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if Match Found": {
      "main": [
        [
          {
            "node": "Send Email Notification",
            "type": "main",
            "index": 0
          },
          {
            "node": "Add to Library",
            "type": "main",
            "index": 0
          },
          {
            "node": "Slack Notification",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Failed Match",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Email Notification": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add to Library": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slack Notification": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Failed Match": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
}